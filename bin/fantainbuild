# Fantain Automation Build Script
 
 
#!/bin/bash

#Matrix Table to set the environment for build to be smooth
#--------------------------------------------------
#                        ANDROID
#--------------------------------------------------
#            FANTAIN                 SRH
#--------------------------------------------------
#DEV    com.fantain.fantain    com.fantain.srhdev
#--------------------------------------------------
#TEST           NA                   NA              
#--------------------------------------------------
#PROD   com.fantain.comainapp  com.fantain.srh
#--------------------------------------------------
  
# Variables 
# common
newline='
'
# Fantain project Environment Value
project=$FANTAIN_HOME

# Functions
# Help 
function help {
	echo "
REFERENCE: These paramters are needed to build fantain application

	      	Try fantainbuild 
			-t {android | website} 
			-i {fantain | srh }
			-s {dev | test | prod}	
			-u {true | false}
			-n {gittag name}
			-d {gittag description}
			-v {version number}
			-c {version code number}
			-x {true | false}

EXAMPLE
------- 
fantainbuild -t android -i fantain -s dev -u true -n v1_0 -d my-git-desc -v 3.0 -c 1 -x false

For Detailed description of the parameters, try man fantainbuild
"
}
# Check for important files in the new codebase
function checkfile() {
	if [ -f $1 ] && [ -f $2 ] && [ -f $3 ] && [ -f $4 ]; then
		echo "${newline}Important Files that are needed to create build seems to be good"
	else
		echo "${newline}Important Files need to set the play as per your needs are missing. Please Check your codebase"
		exit 
	fi
}
# Find the Text and Replace with the platform specific values
function searchandreplace() {
	  filename=$1
	  search=$2
	  replace=$3
	  echo $search
	  echo $replace 
  	  grep "$search" $filename &> /dev/null
  	  if [ $? -ne 0 ]; then
    		echo "${newline}Unable to set your environment value(s) in $filename!" 
		exit
  	  else
		# Replace the search string with replace string based on the OS
		ostype=$(uname)
		if [ $ostype = 'Darwin' ]; then
    			 sed -i '' "s/$search/$replace/" $filename
		else
			 sed -i "s/$search/$replace/" $filename
		fi
  	  fi
}
# Build Application for website
function buildwebsite {
	echo "${newline}Enivronments are set as per your needs"	  
	cd $project
        echo "${newline}Fantain Build is Started"
	node r.js -o fantain-build.js
	echo "${newline}Checking Node server status"
	nodestatus=$(pgrep node)
	if [ ! -z $nodestatus ]; then
         	kill -9 $nodestatus
	fi
	echo "${newline}Node Server is up and running"
	echo "${newline}Play is set and Google Chrome will host your play."
	node server.js &
	google-chrome www.local.fantain.com:8080 &
}
# Build APK for mobiles
function buildandroid {
	searchandreplace $configxml $searchversion $replaceversion
	searchandreplace $configxml $searchapkname $replaceapkname
	searchandreplace $Buildxml $searchprojectname $replaceprojectname
	searchandreplace $AndroidManifestxml $searchversioncode $replaceversioncode
	searchandreplace $configxml $searchid $replaceid
	echo "${newline}Enivronments are set as per your needs"
	if [ ! -d "$project/apk" ]; then
		mkdir -p "$project/apk"
        fi
	echo "${newline}Fantain Build is Started"
	node r.js -o fantain-build.js
	echo "${newline}APK Build process started"
	cd $project
	# To make the cordova build according to the instance
	if [ $instance = "dev" ]; then
		cordova build
		cp "$project/platforms/android/ant-build/$installation-$gittagname-debug.apk" "$project/apk"
	else
		cordova build --release
		cp "$project/platforms/android/ant-build/$installation-release.apk" "$project/apk"
	fi
	echo "${newline}Get your new APK at $basedir/apk"
}
# Intiates the Build Process
function initiatebuild {
	# Important Files need to set the environment
	configxml=$project/config.xml
	fantainEnvjs=$project/www/js/f/fantainEnv.js
	AndroidManifestxml=$project/platforms/android/AndroidManifest.xml
	Buildxml=$project/platforms/android/build.xml
	# Search and Replace the Requested environment files
	searchpattern="[a-zA-Z0-9\#\.\_\-]*"
	searchinstallation="\(fg.installation=\)'[a-zA-Z0-9\#\_\.\-]*';"
	replaceinstallation="\1'$installation';"
	searchinstance="\(fg.env=\)'[a-zA-Z0-9\#\_\.\-]*';"
	replaceinstance="\1'$instance';"
	searchversion="\(version=\)\"$searchpattern\""
	replaceversion="\1\"$version\""
	searchapkname="\(<name>\)"
	searchprojectname="\(name=\)\"$searchpattern\""
	if [ $production = "false" ]; then
                replaceapkname="\1$installation-$gittagname"
		echo $replaceapkname
		replaceprojectname="\1\"$installation-$gittagname\""
        else
                replaceapkname="\1$installation"
		replaceprojectname="\1\"$installation\""
        fi
	searchversioncode="\(versionCode=\)\"$searchpattern\""
	replaceversioncode="\1\"$versioncode\""
	searchid="\(id=\)\"$searchpattern\""
	if [ $installation = 'fantain' ]; then
		if [ $instance = 'dev' ]; then
			replaceid="\1\"com.fantain.$installation-$gittagname\""
		else
			replaceid="\1\"com.fantain.comainapp\""
		fi
	else
		if [ $instance = 'dev' ]; then
			replaceid="\1\"com.fantain.$installation$instance-$gittagname\""
        	elif [ $instance = 'prod' ]; then
                	replaceid="\1\"com.fantain.$installation\""
        	else
                	echo "${newline}This installation under construction.Try again to get your APK"
			exit
        	fi
	fi
        # Check the important files which are need to build the application
       	checkfile $configxml $fantainEnvjs $AndroidManifestxml $Buildxml
	# Copying the Appropriate Assets Files
        cp -a $project/$installation-assets/* $project
	# Common environment change for both mobile and desktop
	searchandreplace $fantainEnvjs $searchinstallation $replaceinstallation
        searchandreplace $fantainEnvjs $searchinstance $replaceinstance
	# To Build the application based on the platform
        build$platform
	git tag -a "$gittagname" -m "$gittagdesc"
}

# Trigerring Help Function when there is no paramter
if test $# -eq 0; then
	help
	echo "SPECIFIC ERROR: All Parameters are mandatory. Please Try again"
	exit 0
fi
# InSpecific Errors Messages
function errorhandling() {
	help
	if [ -z $2 ]; then 
		echo "SPECIFIC ERROR:$1 Not Set with correct value. Please Try again${endcolor}"
	else
		echo "SPECIFIC ERROR: Unknown bug while setting $1. Please Try again{$endcolor}"
	fi
}

# The build kicksoff from here
# Gettting the parameters from the command 
while getopts t:i:s:u:n:d:v:c:x: option
do
	input=`echo ${OPTARG} | tr '[:upper:]' '[:lower:]'`
        case "${option}"
        in
                t) if [ $input = 'android' ] || [ $input = 'website' ]; then
			platform=$input
		   else
			errorhandling "Platform" $platform 
			exit
	    	   fi;;
                i) if [ $input = 'fantain' ] || [ $input = 'srh' ]; then
                        installation=$input
		   else
		  	errorhandling "Installation" $installation      
                        exit
                   fi;;
                s) if [ $input = 'dev' ] || [ $input = 'test' ] || [ $input = 'prod' ]; then
                        instance=$input
		   else
                        errorhandling "Instance" $instance
                        exit
                   fi;;
                u) if [ $input = 'true' ] || [ $input = 'false' ]; then
                        uglify=$input
		   else
                        errorhandling "Uglify" $uglify
                        exit
                   fi;;
		n) if [ -n "$input" ]; then
				case "$input" in  
     					*\ * )
           					help
                                		echo "${newline}SPECIFIC ERROR:Git does not allow -n to have spaces"
						exit;;
       					*\.* )
						help
                                		echo "${newline}SPECIFIC ERROR:Fantainbuild does not allow -n to have .(Dot)"
						exit;;
					* ) gittagname=$input
				esac
		   else
			errorhandling "Gittag Name" $gittagname
                        exit
		   fi;;
                d) if [ -n "$input" ]; then
			gittagdesc="$input"
		   else
                        errorhandling "Gittag Description" $gittagdesc
                        exit
                   fi;;
	     	v) if [ -n "$input" ]; then
			version="$input"
		   else
			errorhandling "Version" $version
                        exit
                   fi;;
	        c) if [ -n "$input" ]; then
			versioncode="$input"
		   else
                        errorhandling "Version Code" $versioncode
                        exit
                   fi;;
		x) if [ $input = 'true' ] || [ $input = 'false' ]; then
			if ([ $instance = "prod" ] && [ $input = 'true' ] ) || ([ $instance = "dev" ] && [ $input = 'false' ]); then
                        	production="$input"
			else
				help
				echo "${newline}SPECIFIC ERROR: You can switch -x true / false only if -s is set to prod / dev respectively"
				exit
			fi
                   else
                        errorhandling "Production Release" $production
                        exit
                   fi;;
		*) help
		   echo "SPECIFIC ERROR: Build accpets only above parameters"
		   exit
        esac
done

# Checking whether all parameters are set to build the application
if [ -z $platform ] || [ -z $installation ] || [ -z $instance ] || [ -z $uglify ] || [ -z "$gittagname" ] || [ -z "$gittagdesc" ] || [ -z "$version" ] || [ -z "$versioncode" ] || [ -z $production ]; then
	help
	echo "SPECIFIC ERROR: All Parameters are mandatory. Please Try again"
	exit
else
	# All set Need to Transfer the Files from working directory
	echo "${newline}Hurray!! All Parameters are Good"
	# All set. Build Process will be initiated
	if [ ! -z $project ]; then
      		if [ -d $project/www ]; then
			cd $project
			# Checking Gittag name for the codebase
			testgittag=`git tag | egrep -o "$gittagname$"`
        		if  [ ! -z $testgittag ];then
                		echo "Gittag name already exists,Kindly change your gittag name"
                		exit
        		fi
       			initiatebuild
      		else
			echo "${newline}Your Environment variable is wrong,kindly change the environment variable and try again" 
      		fi
	else
      		echo "${newline}Your Environment variable is not set,kindly set the environment variable and try again"
	fi
fi	
