# Fantain Automation Build Script
 
 
#!/bin/bash

#Matrix Table to set the environment for build to be smooth
#--------------------------------------------------------------------------------
#                WEBSITE                                  ANDROID
#--------------------------------------------------------------------------------
#       FANTAIN               SRH                 FANTAIN              SRH
#--------------------------------------------------------------------------------
#DEV      NA                   NA               $devapkfantain      $devapksrh
#--------------------------------------------------------------------------------
#TEST     NA                   NA                  NA                  NA
#--------------------------------------------------------------------------------
#PROD     NA                   NA               $prodapkfantain     $prodapksrh
#--------------------------------------------------------------------------------
  
# Variables 
# common
newline='
'
basedir="../BuildApplication"
# Environment 
devapkfantain="com.fantain.fantain"
prodapkfantain="com.fantain.comainapp"
devapksrh="com.fantain.srhdev"
prodapksrh="com.fantain.srh"
# Search strings
deployinstallation="##DEPLOYINSTALLATION##"
deployinstance="##DEPLOYINSTANCE##"
deployid="##DEPLOYID##"
deployversion="##DEPLOYVERSION##"
deployversioncode="##DEPLOYVERSIONCODE##"
deployprojectname="##DEPLOYGITNAME##"

# Functions
# Help 
function help {
	echo '
REFERENCE: These paramters are needed to build fantain application

	      	Try fantainbuild 
			-t {android | website} 
			-i {fantain | srh }
			-s {dev | test | prod}	
			-u {true | false}
			-n {gittag name}
			-d {gittag description}
			-v {version number}
			-c {version code number}
			-x {production release}

Example
------- 
fantainbuild -t android -i fantain -s dev -u true -n v1.0 -d "my-git-desc" -v 3.0 -c 1

For Detailed description of the parameters, try man fantainbuild
'
}
# Create a new build folder and copy the codebase to it
function newcodebase {
	echo "${newline}Copying Files....."
  	if [ "$(ls -A $basedir)" ]; then
              	 cp -a -u  .  $basedir
        else
		 cp -a  . $basedir
	fi
	echo "${newline}Your new codebase is in this location ${newline} $basedir"
	# Files Required to build the application with the complete path
        configxml=$basedir/config.xml
        fantainEnvjs=$basedir/www/js/f/fantainEnv.js
        AndroidManifestxml=$basedir/platforms/android/AndroidManifest.xml
        Buildxml=$basedir/platforms/android/build.xml
}
# Check for important files in the new codebase
function checkfile() {
	if [ -f $1 ] && [ -f $2 ] && [ -f $s3 ]; then
		echo "${newline}Important Files that are needed to create build seems to be good"
	else
		echo "${newline}Files Missing. Go to your root directory and try again" 
	fi
}
# Find the Text and Replace with the platform specific values
function searchandreplace() {
	search=$2
	replace=$3
  	  grep "$search" $1 &> /dev/null
  	  if [ $? -ne 0 ]; then
    		echo "${newline}Unable to set your environment value(s) in $1!" 
		echo "The same file in your code base is to be changed with default value(s).This is mandatory to do the build."
		echo "Please Refer README.md Prerequesites to make yourself comfortable to do the change"
		exit
  	  else
		ostype=$(uname)
		if [ $ostype = 'Darwin' ]; then
    			sed -i '' "s/$search/$replace/" $1
		else
			sed -i "s/$search/$replace/" $1
		fi
  	  fi
}
# Build Application for website
function buildwebsite {
	searchandreplace $fantainEnvjs $deployinstallation $installation
	searchandreplace $fantainEnvjs $deployinstance $instance
	echo "${newline}Enivronments are set as per your needs"	  
	cd $basedir
        echo "${newline}Fantain Build is Started"
	node r.js -o fantain-build.js
	echo "${newline}Checking Node server status"
	nodestatus=$(pgrep node)
	if [ ! -z $nodestatus ]; then
         	kill -9 $nodestatus
	fi
	echo "${newline}Node Server is up and running"
	echo "${newline}Play is set and Google Chrome will host your play."
	node server.js &
	google-chrome www.local.fantain.com:8080 &
}
# Build APK for mobiles
function buildapk {
	searchandreplace $fantainEnvjs $deployinstallation $installation 
	searchandreplace $fantainEnvjs $deployinstance $instance
	searchandreplace $configxml $deployversion $version
	if [ $production = "false" ]; then 
		searchandreplace $Buildxml $deployprojectname "$installation-$gittagname"
	else
		searchandreplace $Buildxml $deployprojectname "$installation"
	fi
	searchandreplace $AndroidManifestxml $deployversioncode $versioncode
	if [ $instance = 'dev' ]; then
		if [ $installation = 'fantain' ]; then
			searchandreplace $configxml $deployid "$devapkfantain-$gittagname"
		else
			searchandreplace $configxml $deployid "$devapksrh-$gittagname"

		fi
	elif [ $instance = 'prod' ]; then
                if [ $installation = 'fantain' ]; then
                        searchandreplace $configxml $deployid "$prodapkfantain"
                else
                        searchandreplace $configxml $deployid "$prodapksrh"
                fi
	else
		if [ $installation = 'fantain' ]; then
                        echo "${newline}This installation under construction.Try again to get your APK"
			exit 
                else
                        echo "${newline}This installation under construction.Try again to get your APK" 
			exit
                fi
	fi
	echo "${newline}Enivronments are set as per your needs"
	if [ ! -d "$basedir/apk" ]; then
                mkdir -p "$basedir/apk"
        fi
	echo "${newline}Fantain Build is Started"
	node r.js -o fantain-build.js
	echo "${newline}APK Build process started"
	cd $basedir
	if [ $instance = "dev" ]; then
		cordova build
	else
		cordova build --release
	fi
	cp "$basedir/platforms/android/ant-build/$gittagname-debug.apk" "$basedir/apk"
	echo "${newline}Get your new APK at $basedir/apk"
}
# Intiates the Build Process
function initiatebuild {
	# Creating a Base Directory
        if [ ! -d $basedir ]; then
                mkdir -p $basedir
        fi
        # Copying the codebase to a new Folder
        newcodebase
        # Gittagging for new codebase
        cd $basedir
        git tag -a "$gittagname" -m "$gittagdesc"
        # Check the important files which are need to build the application
       	checkfile $configxml $fantainEnvjs $AndroidManifestxml
        if [ $platform = 'website' ]; then
              cp $FANTAIN_HOME/www/js/f/fantainEnv.js $basedir/$fantainEnvjs
              buildwebsite
        else
              cp $FANTAIN_HOME/www/js/f/fantainEnv.js $basedir/$fantainEnvjs
              cp $FANTAIN_HOME/config.xml $basedir/$configxml
              cp $FANTAIN_HOME/platforms/android/AndroidManifest.xml $basedir/$AndroidManifestxml
	      cp $FANTAIN_HOME/platforms/android/build.xml $basedir/$Buildxml
              buildapk
        fi
}

# Trigerring Help Function when there is no paramter
if test $# -eq 0; then
	help
	echo "${newline}SPECIFIC ERROR: All Parameters are mandatory. Please Try again"
	exit 0
fi
# InSpecific Errors Messages
function errorhandling() {
	help
	if [ -z $2 ]; then 
		echo "${newline}SPECIFIC ERROR:$1 Not Set with correct value. Please Try again"
	else
		echo "${newline}SPECIFIC ERROR: Unknown bug while setting $1. Please Try again"
	fi
}

# The build kicksoff from here
# Gettting the parameters from the command 
while getopts t:i:s:u:n:d:v:c:x: option
do
	input=`echo ${OPTARG} | tr '[:upper:]' '[:lower:]'`
        case "${option}"
        in
                t) if [ $input = 'android' ] || [ $input = 'website' ]; then
			platform=$input
		   else
			errorhandling "Platform" $platform 
			exit
	    	   fi;;
                i) if [ $input = 'fantain' ] || [ $input = 'srh' ]; then
                        installation=$input
		   else
		  	errorhandling "Installation" $installation      
                        exit
                   fi;;
                s) if [ $input = 'dev' ] || [ $input = 'test' ] || [ $input = 'prod' ]; then
                        instance=$input
		   else
                        errorhandling "Instance" $instance
                        exit
                   fi;;
                u) if [ $input = 'true' ] || [ $input = 'false' ]; then
                        uglify=$input
		   else
                        errorhandling "Uglify" $uglify
                        exit
                   fi;;
		n) if [ -n "$input" ]; then
				case "$input" in  
     					*\ * )
           					help
                                		echo "${newline}SPECIFIC ERROR:Git does not allow -n to have spaces"
						exit;;
       					*\.* )
						help
                                		echo "${newline}SPECIFIC ERROR:Fantainbuild does not allow -n to have .(Dot)"
						exit;;
					* ) gittagname=$input
				esac
		   else
			errorhandling "Gittag Name" $gittagname
                        exit
		   fi;;
                d) if [ -n "$input" ]; then
			gittagdesc="$input"
		   else
                        errorhandling "Gittag Description" $gittagdesc
                        exit
                   fi;;
	     	v) if [ -n "$input" ]; then
			version="$input"
		   else
			errorhandling "Version" $version
                        exit
                   fi;;
	        c) if [ -n "$input" ]; then
			versioncode="$input"
		   else
                        errorhandling "Version Code" $versioncode
                        exit
                   fi;;
		x) if [ $input = 'true' ] || [ $input = 'false' ]; then
			if [ $instance = "prod" ] && [ $input = 'true' ]; then
                        	production="$input"
			else
				help
				echo "${newline}SPECIFIC ERROR: You can switch -x true / false only if -s is set to prod / dev respectively"
				exit
			fi
                   else
                        errorhandling "Production Release" $production
                        exit
                   fi;;
		*) help
		   echo "${newline}SPECIFIC ERROR: Build accpets only above parameters"
		   exit
        esac
done

# Checking whether all parameters are set to build the application
if [ -z $platform ] || [ -z $installation ] || [ -z $instance ] || [ -z $uglify ] || [ -z "$gittagname" ] || [ -z "$gittagdesc" ] || [ -z "$version" ] || [ -z "$versioncode" ]; then
	help
	echo "${newline}SPECIFIC ERROR: All Parameters are mandatory. Please Try again"
	exit
else
	# All set Need to Transfer the Files from working directory
	echo "${newline}Hurray!! All Parameters are Good"
	# All set. Build Process will be initiated
	if [ ! -z $FANTAIN_HOME ]; then
      		if [ -d $FANTAIN_HOME/www ]; then
			cd $FANTAIN_HOME
       			initiatebuild
      		else
			echo "${newline}Your Environment variable is wrong,kindly change the environment variable and try again" 
      		fi
	else
      		echo "${newline}Your Environment variable is not set,kindly set the environment variable and try again"
	fi
fi	
