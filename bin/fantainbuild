i# Fantain Automation Build Script
 
 
#!/bin/bash

#Matrix Table to set the environment for build to be smooth
#--------------------------------------------------
#                        ANDROID
#--------------------------------------------------
#            FANTAIN                 SRH
#--------------------------------------------------
#DEV    com.fantain.fantain    com.fantain.srhdev
#--------------------------------------------------
#TEST           NA                   NA              
#--------------------------------------------------
#PROD   com.fantain.comainapp  com.fantain.srh
#--------------------------------------------------
  
# Variables 
# common
newline='
'
# APK Name Declaration
srh="Sunrisers Hyderabad"
fantain="Fantain"
# Fantain project Environment Value
project=$FANTAIN_HOME

# Functions
# Help 
function help {
	echo "
REFERENCE: Try
MANDATORY PARAMETERS
--------- ----------

	      	  fantainbuild 
			-t {android | website} 
			-i {fantain | srh }
			-s {dev | test | prod}	
			-u {true | false}
			-v {version number}
			-c {version code number}
OPTIONAL PARAMETERS
-------- ----------
			-n {gittag name}
                        -d {gittag description}
EXAMPLE
------- 
fantainbuild -t android -i fantain -s dev -u true -n v1_0 -d my-git-desc -v 3.0 -c 1

For Detailed description of the parameters, try man fantainbuild
"
}
# Check for important files in the new codebase
function checkfile() {
	if [ -f $1 ] && [ -f $2 ] && [ -f $3 ] && [ -f $4 ]; then
		echo "${newline}Important Files that are needed to create build seems to be good"
	else
		echo "${newline}Important Files need to set the play as per your needs are missing. Please Check your codebase"
		exit 
	fi
}
# Find the Text and Replace with the platform specific values
function searchandreplace {
	  filename=$1
	  search=$2
	  replace=$3	
	  node substitute.js $search $replace $filename  > $filename.tmp
	  mv $filename.tmp $filename
}
# Build Application for website
function buildwebsite {
	echo "${newline}Enivronments are set as per your needs"	  
	cd $project
        echo "${newline}Fantain Build is Started"
	./build
	echo "${newline}Checking Node server status"
	nodestatus=$(pgrep node)
	if [ ! -z $nodestatus ]; then
         	kill -9 $nodestatus
	fi
	echo "${newline}Node Server is up and running"
	echo "${newline}Play is set and Google Chrome will host your play."
	node server.js &
	google-chrome www.local.fantain.com:8080 &
}
# Build APK for mobiles
function buildandroid {
	searchandreplace $configxml $searchversion $replaceversion
	searchandreplace $configxml $searchapkname $replaceapkname
	searchandreplace $Buildxml $searchprojectname $replaceprojectname
	searchandreplace $AndroidManifestxml $searchversioncode $replaceversioncode
	searchandreplace $AndroidManifestxml $searchc2dpermission $replacec2dpermission
	searchandreplace $configxml $searchid $replaceid
	echo "${newline}Enivronments are set as per your needs"
	if [ ! -d "$project/apk" ]; then
		mkdir -p "$project/apk"
        fi
	echo "${newline}Fantain Build is Started"
	./build
	echo "${newline}APK Build process started"
	cd $project
	# To make the cordova build according to the instance
	if [ $instance = "dev" ]; then
		cordova build
		if [ ! -z $gittagname ]; then
			cp "$project/platforms/android/ant-build/$installation-$gittagname-debug.apk" "$project/apk"
		else
			cp "$project/platforms/android/ant-build/$installation-debug.apk" "$project/apk"
		fi
	else
		cordova build --release
		cp "$project/platforms/android/ant-build/$installation-release.apk" "$project/apk"
	fi
	echo "${newline}Get your new APK at $basedir/apk"
}
# Intiates the Build Process
function initiatebuild {
	# Important Files need to set the environment
	configxml=$project/config.xml
	fantainEnvjs=$project/www/js/f/fantainEnv.js
	AndroidManifestxml=$project/platforms/android/AndroidManifest.xml
	Buildxml=$project/platforms/android/build.xml
	# Search and Replace the Requested environment files
	searchinstallation="(fg.installation[\s]*=[\s]*\")(.*?)(\")"
	replaceinstallation="$installation"
	searchversionenv="(fg.version[\s]*=[\s]*\")(.*?)(\")"
	replaceversionenv="$version"
	searchversioncodeenv="(fg.versionCode[\s]*=[\s]*)(.*?)(;)"	
	replaceversioncodeenv="$versioncode"
	searchandroidpackagename="(fg.androidPackageName[\s]*=[\s]*\")(.*?)(\")"
	searchinstance="(fg.env[\s]*=[\s]*\")(.*?)(\")"
	replaceinstance="$instance"
	searchversion="(version=\")(.*?)(\")"
	replaceversion="$version"
	searchapkname="(<name>)(.*?)(</name>)"
	replaceapkname=$(eval "echo \$$installation")
	searchprojectname="(name=\")(.*?)(\")"
	searchc2dpermission="(android:name=\")(.*?)(.permission.C2D_MESSAGE\")"
	if [ $instance = 'dev' ] && [ -n "$gittagname" ]; then
                replaceapkname="$replaceapkname-$gittagname"
		replaceprojectname="$installation-$gittagname"
        else
                replaceapkname="$replaceapkname"
		replaceprojectname="$installation"
	fi
	searchversioncode="(versionCode=\")(.*?)(\")"
	replaceversioncode="$versioncode"
	searchid="(id=\")(.*?)(\")"
	if [ $installation = 'fantain' ]; then
		if [ $instance = 'dev' ]; then
			if [ ! -z $gittagname ]; then
				replaceid="com.fantain.$installation-$gittagname"
				replaceandroidpackagename="com.fantain.$installation-$gittagname"
				replacec2dpermission="com.fantain.$installation-$gittagname"
			else
				replaceid="com.fantain.$installation"
				replaceandroidpackagename="com.fantain.$installation"
				replacec2dpermission="com.fantain.$installation"
			fi
		elif [ $instance = 'prod' ]; then
			replaceid="com.fantain.comainapp"
			replaceandroidpackagename="com.fantain.comainapp"
			replacec2dpermission="com.fantain.comainapp"
		else
                        echo "${newline}This installation under construction.Try again to get your APK"
                        exit
                fi
	else
		if [ $instance = 'dev' ]; then 
			if [ ! -z $gittagname ]; then
				replaceid="com.fantain.$installation$instance-$gittagname"
				replaceandroidpackagename="com.fantain.$installation$instance-$gittagname"
				replacec2dpermission="com.fantain.$installation$instance-$gittagname"
			else
				replaceid="com.fantain.$installation$instance"
				replaceandroidpackagename="com.fantain.$installation$instance"
				replacec2dpermission="com.fantain.$installation$instance"
			fi
        	elif [ $instance = 'prod' ]; then
                	replaceid="com.fantain.$installation"
			replaceandroidpackagename="com.fantain.$installation"
			replacec2dpermission="com.fantain.$installation"
        	else
                	echo "${newline}This installation under construction.Try again to get your APK"
			exit
        	fi
	fi
        # Check the important files which are need to build the application
       	checkfile $configxml $fantainEnvjs $AndroidManifestxml $Buildxml
	# Copying the Appropriate Assets Files
        cp -a $project/$installation-assets/* $project	
	# Common environment change for both mobile and desktop
	searchandreplace $fantainEnvjs $searchinstallation $replaceinstallation
        searchandreplace $fantainEnvjs $searchinstance $replaceinstance
	searchandreplace $fantainEnvjs $searchversionenv $replaceversionenv
        searchandreplace $fantainEnvjs $searchversioncodeenv $replaceversioncodeenv
	searchandreplace $fantainEnvjs $searchandroidpackagename $replaceandroidpackagename
	# To Build the application based on the platform
        build$platform
	if [ -n "$gittagname" ] && [ -n "$gittagdesc" ]; then
		git tag -a "$gittagname" -m "$gittagdesc"
	 	echo "${newline}Gittaging done for your codebase"
	else
		echo "${newline}Gittaging not done for your codebase."
	fi
}

# Trigerring Help Function when there is no paramter
if test $# -eq 0; then
	help
	echo "SPECIFIC ERROR: No Parmaters are given. Please Try again"
	exit 0
fi
# InSpecific Errors Messages
function errorhandling() {
	help
	if [ -z $2 ]; then 
		echo "SPECIFIC ERROR: Please check your $1 paramter.Please Try again"
	else
		echo "SPECIFIC ERROR: Unknown bug in your $1 parameter.Please Try again"
	fi
}

# The build kicksoff from here
# Gettting the parameters from the command 
while getopts t:i:s:u:n:d:v:c: option
do
	input=`echo ${OPTARG} | tr '[:upper:]' '[:lower:]'`
        case "${option}"
        in
                t) if [ $input = 'android' ] || [ $input = 'website' ]; then
			platform=$input
		   else
			errorhandling "Platform"
			exit
	    	   fi;;
                i) if [ $input = 'fantain' ] || [ $input = 'srh' ]; then
                        installation=$input
		   else
		    	errorhandling "Installation"  
                        exit
                   fi;;
                s) if [ $input = 'dev' ] || [ $input = 'test' ] || [ $input = 'prod' ]; then
                        instance=$input
		   else
                        errorhandling "Instance"
                        exit
                   fi;;
                u) if [ $input = 'true' ] || [ $input = 'false' ]; then
                        uglify=$input
		   else
                        errorhandling "Uglify"
                        exit
                   fi;;
		n) if [ -n "$input" ]; then
				case "$input" in  
     					*\ * )
           					help
                                		echo "${newline}SPECIFIC ERROR:Git does not allow -n to have spaces"
						exit;;
       					*\.* )
						help
                                		echo "${newline}SPECIFIC ERROR:Fantainbuild does not allow -n to have .(Dot)"
						exit;;
					* )	gittagname="$input"
				esac
		   else
			gittagname=$input
		   fi;;
                d) gittagdesc="$input";;
	     	v) if [ -n "$input" ]; then
			version="$input"
		   else
			errorhandling "Version"
                        exit
                   fi;;
	        c) if [ -n "$input" ]; then
			versioncode="$input"
		   else
                        errorhandling "Version Code"
                        exit
                   fi;;
		*) help
		   echo "SPECIFIC ERROR: Build accpets only above parameters"
		   exit
        esac
done

# Checking whether all parameters are set to build the application
if [ -z $platform ] || [ -z $installation ] || [ -z $instance ] || [ -z $uglify ] || [ -z "$version" ] || [ -z "$versioncode" ]; then
	help
	echo "SPECIFIC ERROR: All Parameters are mandatory. Please Try again"
	exit
else
	
	# All set Need to Transfer the Files from working directory
	echo "${newline}Hurray!! All Parameters are Good"
	# All set. Build Process will be initiated
	if [ ! -z $project ]; then
      		if [ -d $project/www ]; then
			cd $project
			# Checking Gittag name for the codebase
			testgittag=`git tag | egrep -o "$gittagname$"`
        		if  [ ! -z $testgittag ];then
                		echo "Gittag name already exists,Kindly change your gittag name"
                		exit
        		fi
			if [ ! -z $gittagname ];  then
				if [ ! -z $gittagdesc ]; then 
					echo "$gittagdesc"
       					initiatebuild
				else
					errorhandling "Gittag Description"
					exit
				fi
			else
				if [ ! -z $gittagdesc ]; then
					errorhandling "Gittag Name"
					exit
				else
					initiatebuild
				fi
			fi
      		else
			echo "${newline}Your Environment variable is wrong,kindly change the environment variable and try again" 
      		fi
	else
      		echo "${newline}Your Environment variable is not set,kindly set the environment variable and try again"
	fi
fi	
